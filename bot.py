import os
import threading
import telebot  # type: ignore
from telebot import types  # type: ignore

from database import (
    init_db,
    DB,
    add_reminder,
    get_reminders,
    delete_reminder,
    get_shopping_list,
    add_shopping_item,
    delete_shopping_item,
)

from dotenv import load_dotenv  # type: ignore
from datetime import datetime, timedelta
from utils import schedule_checker


load_dotenv()
bot = telebot.TeleBot(os.getenv("TELEGRAM_TOKEN"))
init_db()


USER_STATES = {}


def get_main_markup():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["üìù –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", "üõí –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫", "üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª"]
    markup.add(*buttons)
    return markup


@bot.message_handler(commands=["start"])
def start(message):
    user_id = message.from_user.id
    with DB() as cursor:
        cursor.execute(
            "INSERT OR IGNORE INTO users (user_id, created) VALUES (?, ?)",
            (user_id, datetime.now()),
        )
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_markup(),
    )


@bot.message_handler(func=lambda m: m.text == "üìù –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
def handle_reminders(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å", callback_data="create_reminder"),
        types.InlineKeyboardButton("–ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="list_reminders"),
        types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data="delete_reminder"),
    )
    bot.send_message(message.chat.id, "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "create_reminder")
def create_reminder(call):
    USER_STATES[call.from_user.id] = {"step": "reminder_text"}
    bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:")


@bot.message_handler(
    func=lambda m: USER_STATES.get(m.from_user.id, {}).get("step") == "reminder_text"
)
def process_reminder_text(message):
    user_id = message.from_user.id
    USER_STATES[user_id] = {"step": "reminder_date", "text": message.text}
    bot.send_message(
        message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30 31.12.2023):",
    )


@bot.message_handler(
    func=lambda m: USER_STATES.get(m.from_user.id, {}).get("step") == "reminder_date"
)
def process_reminder_date(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π '—Å–µ–≥–æ–¥–Ω—è' –∏ '–∑–∞–≤—Ç—Ä–∞'"""
    user_id = message.from_user.id
    try:
        # –ü–∞—Ä—Å–∏–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if " " in message.text:  # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–µ–ª - –≤—Ä–µ–º—è –∏ –¥–∞—Ç–∞
            time_str, date_str = message.text.split()
        else:  # –¢–æ–ª—å–∫–æ –≤—Ä–µ–º—è - –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º —Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞
            time_str = message.text
            now = datetime.now()
            if now.hour > int(time_str.split(":")[0]) or (
                now.hour == int(time_str.split(":")[0])
                and now.minute >= int(time_str.split(":")[1])
            ):
                date_str = "–∑–∞–≤—Ç—Ä–∞"
            else:
                date_str = "—Å–µ–≥–æ–¥–Ω—è"

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–∞—Ç—ã
        if date_str.lower() == "—Å–µ–≥–æ–¥–Ω—è":
            dt_date = datetime.now().date()
        elif date_str.lower() == "–∑–∞–≤—Ç—Ä–∞":
            dt_date = (datetime.now() + timedelta(days=1)).date()
        else:
            day, month, year = map(int, date_str.split("."))
            dt_date = datetime(year, month, day).date()

        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
        hours, minutes = map(int, time_str.split(":"))
        dt = datetime.combine(dt_date, datetime.min.time()).replace(
            hour=hours, minute=minutes
        )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è
        if dt < datetime.now() - timedelta(minutes=1):
            bot.send_message(
                message.chat.id,
                "–î–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–∑–∞–≤—Ç—Ä–∞' –¥–ª—è –≤–µ—á–µ—Ä–Ω–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π",
            )
            return

        USER_STATES[user_id] = {
            "step": "reminder_repeat",
            "text": USER_STATES[user_id]["text"],
            "date": dt,
        }

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        markup.add("–ï–∂–µ–¥–Ω–µ–≤–Ω–æ", "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ", "–ï–∂–µ–º–µ—Å—è—á–Ω–æ", "–ï–∂–µ–≥–æ–¥–Ω–æ", "–û–¥–∏–Ω —Ä–∞–∑")
        bot.send_message(
            message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å:", reply_markup=markup
        )

    except Exception as e:
        bot.send_message(
            message.chat.id, "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞! –ü—Ä–∏–º–µ—Ä—ã:\n14:30 –∑–∞–≤—Ç—Ä–∞\n18:00 31.12.2023"
        )
        print(f"Date processing error: {e}")


@bot.message_handler(
    func=lambda m: USER_STATES.get(m.from_user.id, {}).get("step") == "reminder_repeat"
)
def process_reminder_repeat(message):
    user_id = message.from_user.id
    repeat_map = {
        "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ": "daily",
        "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ": "weekly",
        "–ï–∂–µ–º–µ—Å—è—á–Ω–æ": "monthly",
        "–ï–∂–µ–≥–æ–¥–Ω–æ": "yearly",
        "–û–¥–∏–Ω —Ä–∞–∑": None,
    }
    repeat = repeat_map.get(message.text)

    dt = USER_STATES[user_id]["date"]

    add_reminder(user_id, USER_STATES[user_id]["text"], dt, repeat=repeat)
    local_time = dt.strftime("%H:%M %d.%m.%Y")
    bot.send_message(
        message.chat.id,
        f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –Ω–∞ {local_time}",
        reply_markup=get_main_markup(),
    )
    del USER_STATES[user_id]


@bot.callback_query_handler(func=lambda call: call.data == "list_reminders")
def list_reminders(call):
    reminders = get_reminders(call.from_user.id)
    if not reminders:
        bot.send_message(call.message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
        return

    text = "–í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n\n"
    for rem in reminders:
        text += f"{rem[0]}. {rem[1]} - {rem[2].strftime('%H:%M %d.%m.%Y')}"
        if rem[3]:
            text += f" (–ø–æ–≤—Ç–æ—Ä: {rem[3]})"
        text += "\n"

    bot.send_message(call.message.chat.id, text)


@bot.callback_query_handler(func=lambda call: call.data == "delete_reminder")
def delete_reminder_callback(call):
    USER_STATES[call.from_user.id] = {"step": "delete_reminder"}
    bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")


@bot.message_handler(
    func=lambda m: USER_STATES.get(m.from_user.id, {}).get("step") == "delete_reminder"
)
def process_delete_reminder(message):
    user_id = message.from_user.id
    try:
        rem_id = int(message.text)
        delete_reminder(rem_id)
        bot.send_message(
            message.chat.id, "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!", reply_markup=get_main_markup()
        )
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    finally:
        if user_id in USER_STATES:
            del USER_STATES[user_id]


# –í —Ñ—É–Ω–∫—Ü–∏–∏ handle_shopping_list –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É
@bot.message_handler(func=lambda m: m.text == "üõí –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫")
def handle_shopping_list(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å", callback_data="add_item"),
        types.InlineKeyboardButton("–°–ø–∏—Å–æ–∫", callback_data="show_list"),
        types.InlineKeyboardButton(
            "–£–¥–∞–ª–∏—Ç—å –≤—Å—ë", callback_data="delete_all_items"
        ),  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
        types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data="delete_item"),
    )
    bot.send_message(
        message.chat.id, "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–º –ø–æ–∫—É–ø–æ–∫:", reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: call.data == "add_item")
def add_shopping_item_callback(call):
    USER_STATES[call.from_user.id] = {"action": "add_item", "step": "item"}
    bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")


# –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫
@bot.callback_query_handler(func=lambda call: call.data == "delete_all_items")
def delete_all_shopping_items(call):
    with DB() as cursor:
        cursor.execute(
            "DELETE FROM shopping_list WHERE user_id = ?", (call.from_user.id,)
        )
    bot.answer_callback_query(call.id, "–í–µ—Å—å —Å–ø–∏—Å–æ–∫ —É–¥–∞–ª–µ–Ω!")
    bot.send_message(
        call.message.chat.id, "–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –æ—á–∏—â–µ–Ω.", reply_markup=get_main_markup()
    )


@bot.message_handler(
    func=lambda m: USER_STATES.get(m.from_user.id, {}).get("step") == "item"
)
def process_shopping_item(message):
    user_id = message.from_user.id
    USER_STATES[user_id] = {
        "action": "add_item",
        "step": "category",
        "item": message.text,
    }
    bot.send_message(
        message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞ (–µ—Å–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-'):"
    )


@bot.message_handler(
    func=lambda m: USER_STATES.get(m.from_user.id, {}).get("step") == "category"
)
def process_shopping_category(message):
    user_id = message.from_user.id
    category = message.text.strip()
    if category == "-":
        category = "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
    add_shopping_item(user_id, USER_STATES[user_id]["item"], category)
    bot.send_message(
        message.chat.id,
        "–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫!",
        reply_markup=get_main_markup(),
    )
    del USER_STATES[user_id]


@bot.callback_query_handler(func=lambda call: call.data == "show_list")
def show_shopping_list(call):
    items = get_shopping_list(call.from_user.id)
    if not items:
        bot.send_message(call.message.chat.id, "–í–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø—É—Å—Ç.")
        return

    items_by_category = {}
    for item in items:
        category = item[2] if item[2] else "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
        if category not in items_by_category:
            items_by_category[category] = []
        items_by_category[category].append(item[1])

    text = "–í–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫:\n\n"
    for category in items_by_category:
        text += f"<b>{category}:</b>\n"
        text += "\n".join(f"‚Ä¢ {item}" for item in items_by_category[category])
        text += "\n\n"

    bot.send_message(call.message.chat.id, text, parse_mode="HTML")


@bot.callback_query_handler(func=lambda call: call.data == "delete_item")
def delete_shopping_item_callback(call):
    items = get_shopping_list(call.from_user.id)
    if not items:
        bot.send_message(call.message.chat.id, "–í–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø—É—Å—Ç.")
        return

    markup = types.InlineKeyboardMarkup()
    for item in items:
        markup.add(
            types.InlineKeyboardButton(
                f"{item[1]} ({item[2]})", callback_data=f"delete_item_{item[0]}"
            )
        )

    bot.send_message(
        call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith("delete_item_"))
def process_delete_item(call):
    item_id = call.data.split("_")[-1]
    delete_shopping_item(item_id)
    bot.answer_callback_query(call.id, "–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω!")
    bot.delete_message(call.message.chat.id, call.message.message_id)
    bot.send_message(
        call.message.chat.id, "–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.", reply_markup=get_main_markup()
    )


@bot.message_handler(func=lambda m: m.text == "üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª")
def suggest_feature(message):
    bot.send_message(
        message.chat.id, "–í–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –±–æ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É."
    )


@bot.message_handler(commands=["export"])
def export_data(message):
    user_id = message.from_user.id
    reminders = get_reminders(user_id)
    if reminders:
        reminders_csv = "ID,–¢–µ–∫—Å—Ç,–î–∞—Ç–∞,–ü–æ–≤—Ç–æ—Ä\n"
        for rem in reminders:
            reminders_csv += f"{rem[0]},{rem[1]},{rem[2].strftime('%d.%m.%Y %H:%M')},{rem[3] or '–Ω–µ—Ç'}\n"
        bot.send_document(message.chat.id, ("reminders.csv", reminders_csv))
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")

    items = get_shopping_list(user_id)
    if items:
        items_csv = "ID,–¢–æ–≤–∞—Ä,–ö–∞—Ç–µ–≥–æ—Ä–∏—è\n"
        for item in items:
            items_csv += f"{item[0]},{item[1]},{item[2]}\n"
        bot.send_document(message.chat.id, ("shopping_list.csv", items_csv))
    else:
        bot.send_message(message.chat.id, "–í–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø—É—Å—Ç.")


if __name__ == "__main__":
    threading.Thread(target=schedule_checker, args=(bot,), daemon=True).start()
    bot.infinity_polling()
