import os
import threading
import telebot
from telebot import types
from database import (
    init_db, DB, add_reminder, get_reminders,
    delete_reminder, get_shopping_list, add_shopping_item,
    delete_shopping_item
)
from dotenv import load_dotenv
from datetime import datetime
from utils import schedule_checker


load_dotenv()
bot = telebot.TeleBot(os.getenv('TELEGRAM_TOKEN'))
init_db()

USER_STATES = {}


def get_main_markup():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ['üìù –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è', 'üõí –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫', 'üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª']
    markup.add(*buttons)
    return markup


@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    with DB() as cursor:
        cursor.execute(
            'INSERT OR IGNORE INTO users (user_id, created) VALUES (?, ?)',
            (user_id, datetime.now())
        )
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_markup())


@bot.message_handler(func=lambda m: m.text == 'üìù –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è')
def handle_reminders(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton('–°–æ–∑–¥–∞—Ç—å', callback_data='create_reminder'),
        types.InlineKeyboardButton('–ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è', callback_data='list_reminders'),
        types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å', callback_data='delete_reminder')
    )
    bot.send_message(message.chat.id, "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == 'create_reminder')
def create_reminder(call):
    USER_STATES[call.from_user.id] = {'step': 'reminder_text'}
    bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:")


@bot.message_handler(func=lambda m: USER_STATES.get(m.from_user.id, {}).get('step') == 'reminder_text')
def process_reminder_text(message):
    user_id = message.from_user.id
    USER_STATES[user_id] = {
        'step': 'reminder_date',
        'text': message.text
    }
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30 31.12.2023):")


@bot.message_handler(func=lambda m: USER_STATES.get(m.from_user.id, {}).get('step') == 'reminder_date')
def process_reminder_date(message):
    user_id = message.from_user.id
    try:
        time_str, date_str = message.text.split()
        hours, minutes = map(int, time_str.split(':'))
        day, month, year = map(int, date_str.split('.'))
        
        dt = datetime(year, month, day, hours, minutes)
        
        USER_STATES[user_id] = {
            'step': 'reminder_repeat',
            'text': USER_STATES[user_id]['text'],
            'date': dt
        }
        
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        markup.add('–ï–∂–µ–¥–Ω–µ–≤–Ω–æ', '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ', '–ï–∂–µ–º–µ—Å—è—á–Ω–æ', '–ï–∂–µ–≥–æ–¥–Ω–æ', '–û–¥–∏–Ω —Ä–∞–∑')
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å:", reply_markup=markup)
    except Exception as e:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú –î–î.–ú–ú.–ì–ì–ì–ì")


@bot.message_handler(func=lambda m: USER_STATES.get(m.from_user.id, {}).get('step') == 'reminder_repeat')
def process_reminder_repeat(message):
    user_id = message.from_user.id
    repeat_map = {
        '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ': 'daily',
        '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ': 'weekly',
        '–ï–∂–µ–º–µ—Å—è—á–Ω–æ': 'monthly',
        '–ï–∂–µ–≥–æ–¥–Ω–æ': 'yearly',
        '–û–¥–∏–Ω —Ä–∞–∑': None
    }
    repeat = repeat_map.get(message.text)
    
    dt = USER_STATES[user_id]['date']
    
    add_reminder(
        user_id,
        USER_STATES[user_id]['text'],
        dt,
        repeat=repeat
    )
    local_time = dt.strftime('%H:%M %d.%m.%Y')
    bot.send_message(message.chat.id, f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –Ω–∞ {local_time}", reply_markup=get_main_markup())
    del USER_STATES[user_id]


@bot.callback_query_handler(func=lambda call: call.data == 'list_reminders')
def list_reminders(call):
    reminders = get_reminders(call.from_user.id)
    if not reminders:
        bot.send_message(call.message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
        return
    
    text = "–í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n\n"
    for rem in reminders:
        text += f"{rem[0]}. {rem[1]} - {rem[2].strftime('%H:%M %d.%m.%Y')}"
        if rem[3]:
            text += f" (–ø–æ–≤—Ç–æ—Ä: {rem[3]})"
        text += "\n"
    
    bot.send_message(call.message.chat.id, text)


@bot.callback_query_handler(func=lambda call: call.data == 'delete_reminder')
def delete_reminder_callback(call):
    USER_STATES[call.from_user.id] = {'step': 'delete_reminder'}
    bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")


@bot.message_handler(func=lambda m: USER_STATES.get(m.from_user.id, {}).get('step') == 'delete_reminder')
def process_delete_reminder(message):
    user_id = message.from_user.id
    try:
        rem_id = int(message.text)
        delete_reminder(rem_id)
        bot.send_message(message.chat.id, "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!", reply_markup=get_main_markup())
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    finally:
        if user_id in USER_STATES:
            del USER_STATES[user_id]


@bot.message_handler(func=lambda m: m.text == 'üõí –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫')
def handle_shopping_list(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å', callback_data='add_item'),
        types.InlineKeyboardButton('–°–ø–∏—Å–æ–∫', callback_data='show_list'),
        types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å', callback_data='delete_item')
    )
    bot.send_message(message.chat.id, "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–º –ø–æ–∫—É–ø–æ–∫:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == 'add_item')
def add_shopping_item_callback(call):
    USER_STATES[call.from_user.id] = {'action': 'add_item', 'step': 'item'}
    bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")


@bot.message_handler(func=lambda m: USER_STATES.get(m.from_user.id, {}).get('step') == 'item')
def process_shopping_item(message):
    user_id = message.from_user.id
    USER_STATES[user_id] = {'action': 'add_item', 'step': 'category', 'item': message.text}
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:")


@bot.message_handler(func=lambda m: USER_STATES.get(m.from_user.id, {}).get('step') == 'category')
def process_shopping_category(message):
    user_id = message.from_user.id
    add_shopping_item(user_id, USER_STATES[user_id]['item'], message.text)
    bot.send_message(message.chat.id, "–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫!", reply_markup=get_main_markup())
    del USER_STATES[user_id]


@bot.callback_query_handler(func=lambda call: call.data == 'show_list')
def show_shopping_list(call):
    items = get_shopping_list(call.from_user.id)
    if not items:
        bot.send_message(call.message.chat.id, "–í–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø—É—Å—Ç.")
        return
    
    items_by_category = {}
    for item in items:
        if item[2] not in items_by_category:
            items_by_category[item[2]] = []
        items_by_category[item[2]].append(item[1])
    
    text = "–í–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫:\n\n"
    for category in items_by_category:
        text += f"<b>{category}:</b>\n"
        text += "\n".join(f"‚Ä¢ {item}" for item in items_by_category[category])
        text += "\n\n"
    
    bot.send_message(call.message.chat.id, text, parse_mode='HTML')


@bot.callback_query_handler(func=lambda call: call.data == 'delete_item')
def delete_shopping_item_callback(call):
    USER_STATES[call.from_user.id] = {'step': 'delete_item'}
    bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")


@bot.message_handler(func=lambda m: USER_STATES.get(m.from_user.id, {}).get('step') == 'delete_item')
def process_delete_item(message):
    user_id = message.from_user.id
    try:
        item_id = int(message.text)
        delete_shopping_item(item_id)
        bot.send_message(message.chat.id, "–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞!", reply_markup=get_main_markup())
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    finally:
        if user_id in USER_STATES:
            del USER_STATES[user_id]


@bot.message_handler(func=lambda m: m.text == 'üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª')
def suggest_feature(message):
    bot.send_message(message.chat.id, "–í–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –±–æ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.")


if __name__ == '__main__':
    threading.Thread(target=schedule_checker, args=(bot,), daemon=True).start()
    bot.infinity_polling()
